/* eslint-disable */
// sequence-api v0.4.0 9ed28977ef1572bcc09e507f04c1ec92aab12865
// --
// Code generated by webrpc-gen@v0.18.7 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=api.ridl -target=typescript -client -out=./clients/api.gen.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1";

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.4.0";

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "9ed28977ef1572bcc09e507f04c1ec92aab12865";

//
// Types
//

export interface LinkedWallet {
  id: number;
  walletType?: string;
  walletAddress: string;
  linkedWalletAddress: string;
  createdAt?: string;
}

export interface LinkWalletArgs {
  parentWalletAddress: string;
  parentWalletMessage: string;
  parentWalletSignature: string;
  linkedWalletAddress: string;
  linkedWalletMessage: string;
  linkedWalletSignature: string;
  signatureChainId: string;
  linkedWalletType?: string;
}

export interface LinkWalletReturn {
  status: boolean;
}

export interface GetLinkedWalletsArgs {
  parentWalletAddress: string;
  parentWalletMessage: string;
  parentWalletSignature: string;
  signatureChainId: string;
}

export interface GetLinkedWalletsReturn {
  linkedWallets: Array<LinkedWallet>;
}

export interface RemoveLinkedWalletArgs {
  parentWalletAddress: string;
  parentWalletMessage: string;
  parentWalletSignature: string;
  linkedWalletAddress: string;
  linkedWalletMessage: string;
  linkedWalletSignature: string;
  signatureChainId: string;
}

export interface RemoveLinkedWalletReturn {
  status: boolean;
}

export interface API {
  linkWallet(
    args: LinkWalletArgs,
    headers?: object,
    signal?: AbortSignal
  ): Promise<LinkWalletReturn>;
  getLinkedWallets(
    args: GetLinkedWalletsArgs,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetLinkedWalletsReturn>;
  removeLinkedWallet(
    args: RemoveLinkedWalletArgs,
    headers?: object,
    signal?: AbortSignal
  ): Promise<RemoveLinkedWalletReturn>;
}

//
// Client
//
export class API implements API {
  protected hostname: string;
  protected fetch: Fetch;
  protected path = "/rpc/API/";

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname;
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init);
  }

  private url(name: string): string {
    return this.hostname + this.path + name;
  }

  linkWallet = (
    args: LinkWalletArgs,
    headers?: object,
    signal?: AbortSignal
  ): Promise<LinkWalletReturn> => {
    return this.fetch(
      this.url("LinkWallet"),
      createHTTPRequest(args, headers, signal)
    ).then(
      (res) => {
        return buildResponse(res).then((_data) => {
          return {
            status: <boolean>_data.status,
          };
        });
      },
      (error) => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ""}`,
        });
      }
    );
  };

  getLinkedWallets = (
    args: GetLinkedWalletsArgs,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetLinkedWalletsReturn> => {
    return this.fetch(
      this.url("GetLinkedWallets"),
      createHTTPRequest(args, headers, signal)
    ).then(
      (res) => {
        return buildResponse(res).then((_data) => {
          return {
            linkedWallets: <Array<LinkedWallet>>_data.linkedWallets,
          };
        });
      },
      (error) => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ""}`,
        });
      }
    );
  };

  removeLinkedWallet = (
    args: RemoveLinkedWalletArgs,
    headers?: object,
    signal?: AbortSignal
  ): Promise<RemoveLinkedWalletReturn> => {
    return this.fetch(
      this.url("RemoveLinkedWallet"),
      createHTTPRequest(args, headers, signal)
    ).then(
      (res) => {
        return buildResponse(res).then((_data) => {
          return {
            status: <boolean>_data.status,
          };
        });
      },
      (error) => {
        throw WebrpcRequestFailedError.new({
          cause: `fetch(): ${error.message || ""}`,
        });
      }
    );
  };
}

const createHTTPRequest = (
  body: object = {},
  headers: object = {},
  signal: AbortSignal | null = null
): object => {
  return {
    method: "POST",
    headers: { ...headers, "Content-Type": "application/json" },
    body: JSON.stringify(body || {}),
    signal,
  };
};

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then((text) => {
    let data;
    try {
      data = JSON.parse(text);
    } catch (error) {
      let message = "";
      if (error instanceof Error) {
        message = error.message;
      }
      throw WebrpcBadResponseError.new({
        status: res.status,
        cause: `JSON.parse(): ${message}: response text: ${text}`,
      });
    }
    if (!res.ok) {
      const code: number = typeof data.code === "number" ? data.code : 0;
      throw (webrpcErrorByCode[code] || WebrpcError).new(data);
    }
    return data;
  });
};

//
// Errors
//

export class WebrpcError extends Error {
  name: string;
  code: number;
  message: string;
  status: number;
  cause?: string;

  /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
  msg: string;

  constructor(
    name: string,
    code: number,
    message: string,
    status: number,
    cause?: string
  ) {
    super(message);
    this.name = name || "WebrpcError";
    this.code = typeof code === "number" ? code : 0;
    this.message = message || `endpoint error ${this.code}`;
    this.msg = this.message;
    this.status = typeof status === "number" ? status : 0;
    this.cause = cause;
    Object.setPrototypeOf(this, WebrpcError.prototype);
  }

  static new(payload: any): WebrpcError {
    return new this(
      payload.error,
      payload.code,
      payload.message || payload.msg,
      payload.status,
      payload.cause
    );
  }
}

// Webrpc errors

export class WebrpcEndpointError extends WebrpcError {
  constructor(
    name: string = "WebrpcEndpoint",
    code: number = 0,
    message: string = "endpoint error",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
  }
}

export class WebrpcRequestFailedError extends WebrpcError {
  constructor(
    name: string = "WebrpcRequestFailed",
    code: number = -1,
    message: string = "request failed",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
  }
}

export class WebrpcBadRouteError extends WebrpcError {
  constructor(
    name: string = "WebrpcBadRoute",
    code: number = -2,
    message: string = "bad route",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
  }
}

export class WebrpcBadMethodError extends WebrpcError {
  constructor(
    name: string = "WebrpcBadMethod",
    code: number = -3,
    message: string = "bad method",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
  }
}

export class WebrpcBadRequestError extends WebrpcError {
  constructor(
    name: string = "WebrpcBadRequest",
    code: number = -4,
    message: string = "bad request",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
  }
}

export class WebrpcBadResponseError extends WebrpcError {
  constructor(
    name: string = "WebrpcBadResponse",
    code: number = -5,
    message: string = "bad response",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
  }
}

export class WebrpcServerPanicError extends WebrpcError {
  constructor(
    name: string = "WebrpcServerPanic",
    code: number = -6,
    message: string = "server panic",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
  }
}

export class WebrpcInternalErrorError extends WebrpcError {
  constructor(
    name: string = "WebrpcInternalError",
    code: number = -7,
    message: string = "internal error",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
  }
}

export class WebrpcClientDisconnectedError extends WebrpcError {
  constructor(
    name: string = "WebrpcClientDisconnected",
    code: number = -8,
    message: string = "client disconnected",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
  }
}

export class WebrpcStreamLostError extends WebrpcError {
  constructor(
    name: string = "WebrpcStreamLost",
    code: number = -9,
    message: string = "stream lost",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
  }
}

export class WebrpcStreamFinishedError extends WebrpcError {
  constructor(
    name: string = "WebrpcStreamFinished",
    code: number = -10,
    message: string = "stream finished",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
  }
}

// Schema errors

export class UnauthorizedError extends WebrpcError {
  constructor(
    name: string = "Unauthorized",
    code: number = 1000,
    message: string = "Unauthorized access",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, UnauthorizedError.prototype);
  }
}

export class PermissionDeniedError extends WebrpcError {
  constructor(
    name: string = "PermissionDenied",
    code: number = 1001,
    message: string = "Permission denied",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, PermissionDeniedError.prototype);
  }
}

export class SessionExpiredError extends WebrpcError {
  constructor(
    name: string = "SessionExpired",
    code: number = 1002,
    message: string = "Session expired",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, SessionExpiredError.prototype);
  }
}

export class AbortedError extends WebrpcError {
  constructor(
    name: string = "Aborted",
    code: number = 1005,
    message: string = "Request aborted",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, AbortedError.prototype);
  }
}

export class GeoblockedError extends WebrpcError {
  constructor(
    name: string = "Geoblocked",
    code: number = 1006,
    message: string = "Geoblocked region",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, GeoblockedError.prototype);
  }
}

export class InvalidArgumentError extends WebrpcError {
  constructor(
    name: string = "InvalidArgument",
    code: number = 2000,
    message: string = "Invalid argument",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, InvalidArgumentError.prototype);
  }
}

export class UnavailableError extends WebrpcError {
  constructor(
    name: string = "Unavailable",
    code: number = 2002,
    message: string = "Unavailable resource",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, UnavailableError.prototype);
  }
}

export class QueryFailedError extends WebrpcError {
  constructor(
    name: string = "QueryFailed",
    code: number = 2003,
    message: string = "Query failed",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, QueryFailedError.prototype);
  }
}

export class NotFoundError extends WebrpcError {
  constructor(
    name: string = "NotFound",
    code: number = 3000,
    message: string = "Resource not found",
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause);
    Object.setPrototypeOf(this, NotFoundError.prototype);
  }
}

export enum errors {
  WebrpcEndpoint = "WebrpcEndpoint",
  WebrpcRequestFailed = "WebrpcRequestFailed",
  WebrpcBadRoute = "WebrpcBadRoute",
  WebrpcBadMethod = "WebrpcBadMethod",
  WebrpcBadRequest = "WebrpcBadRequest",
  WebrpcBadResponse = "WebrpcBadResponse",
  WebrpcServerPanic = "WebrpcServerPanic",
  WebrpcInternalError = "WebrpcInternalError",
  WebrpcClientDisconnected = "WebrpcClientDisconnected",
  WebrpcStreamLost = "WebrpcStreamLost",
  WebrpcStreamFinished = "WebrpcStreamFinished",
  Unauthorized = "Unauthorized",
  PermissionDenied = "PermissionDenied",
  SessionExpired = "SessionExpired",
  Aborted = "Aborted",
  Geoblocked = "Geoblocked",
  InvalidArgument = "InvalidArgument",
  Unavailable = "Unavailable",
  QueryFailed = "QueryFailed",
  NotFound = "NotFound",
}

const webrpcErrorByCode: { [code: number]: any } = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
  [-7]: WebrpcInternalErrorError,
  [-8]: WebrpcClientDisconnectedError,
  [-9]: WebrpcStreamLostError,
  [-10]: WebrpcStreamFinishedError,
  [1000]: UnauthorizedError,
  [1001]: PermissionDeniedError,
  [1002]: SessionExpiredError,
  [1005]: AbortedError,
  [1006]: GeoblockedError,
  [2000]: InvalidArgumentError,
  [2002]: UnavailableError,
  [2003]: QueryFailedError,
  [3000]: NotFoundError,
};

export type Fetch = (
  input: RequestInfo,
  init?: RequestInit
) => Promise<Response>;
